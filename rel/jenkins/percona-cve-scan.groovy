pipeline {
    agent { label "min-jammy-x64" }
    stages {
        stage("Install tools") {
            steps {
                sh '''
                sudo apt-get update && sudo apt-get install -y curl jq git docker.io
                curl -sfL https://install.goreleaser.com/github.com/aquasecurity/trivy.sh | sudo sh -s -- -b /usr/local/bin latest
                sudo apt-get install -y wget apt-transport-https gnupg lsb-release
                wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add 
                echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
                sudo apt-get update
                sudo apt-get -y install trivy
                '''
            }
        }
        stage("Scan repositories") {
            steps {
                script {
                    def repos = sh(
                        script: "curl -s https://hub.docker.com/v2/repositories/percona/?page_size=100 | jq -r '.results[].name'",
                        returnStdout: true
                    ).trim().split('\n')

                    def results = []
                    for (def repo : repos) {
                        def tags = sh(
                            script: "curl -s https://hub.docker.com/v2/repositories/percona/${repo}/tags/?page_size=10 | jq -r '.results[].name'",
                            returnStdout: true
                        ).trim().split('\n')

                        for (def tag : tags) {
                            def image = "percona/${repo}:${tag}"
                            sh "trivy --exit-code 0 image --severity HIGH,CRITICAL --format json ${image} | tee -a results.json"
                        }
                    }
                }
            }
        }
        stage("Export results") {
            steps {
                archiveArtifacts artifacts: "results.json", onlyIfSuccessful: false
            }
        }
        stage("Convert to HTML") {
            steps {
                sh """
                jq -r '.[].Vulnerabilities[] | [.VulnerabilityID, .PkgName, .InstalledVersion, .FixedVersion, .Severity] | @tsv' results.json | \
                sed '1i VulnerabilityID Package InstalledVersion FixedVersion Severity' | \
                column -t -s ' ' > results.txt
                """
                sh "sudo apt-get install -y nodejs npm && sudo npm install -g json-2-csv"
                sh "sudo npm install -g json2csv "
                sh "json2csv -i results.json -o results.csv -f VulnerabilityID,PkgName,InstalledVersion,FixedVersion,Severity"
                sh """
                jq '.[].Vulnerabilities[] | {
                    VulnerabilityID: .VulnerabilityID,
                    Severity: .Severity,
                    PkgName: .PkgName,
                    InstalledVersion: .InstalledVersion,
                    FixedVersion: .FixedVersion
                }' results.json | jq -s add | jq -r '["<table><thead><tr><th>", (.[0] | keys_unsorted | map(\"<th>\\(.)</th>\") | add), "</tr></thead><tbody>", (.[] | ["<tr><td>", (.[].toString() | gsub("\\\\"; "/") | gsub("\""; "'"), "</td></tr>") | add], "</tbody></table>"] | add | join(\"\")' > results.html
                """
                sh "curl -X POST -H 'Content-type: application/json' --data '{\"text\":\"<!channel> Results for CVE scan\"}' ${env.SLACK_URL}/cve_scan"
                sh "cat results.html | mail -s 'CVE Scan Results' example@example.com"
            }
        }
        stage("Send report") {
            steps {
                slackSend channel: "#releases-ci", color: "#36a64f", message: "Latest CVE scan results:[${BUILD_URL}]"
                emailext body: "Please find the latest CVE scan results attached.", subject: "CVE Scan Results", to: "evgeniy.patlan@percona.com", attachmentsPattern: "results.html"
            }
        }
    }
}
